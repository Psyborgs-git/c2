schema {
	query: Query
	mutation: Mutations
}

type Account implements Node {
	id: ID!
	username: String
	displayName: String
	bio: String
	DOB: Date
	isPrivate: Boolean!
	verifiedMobileNumber: MobileNumber
	verifiedEmails(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): EmailAddressTypeConnection!
	profession: String
	blocked(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): AccountConnection!
	following(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): AccountConnection!
	dp: String
	music: String
	cover: String
	sex: String
	mutuals(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): AccountConnection
	followers(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): AccountConnection
}

type AccountConnection {
	pageInfo: PageInfo!
	edges: [AccountEdge]!
}

type AccountEdge {
	node: Account
	cursor: String!
}

type Apparel implements Node {
	createdAt: DateTime!
	lastUpdated: DateTime!
	name: String
	description: String
	id: ID!
	liked(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		handle_Icontains: String
		isPrivate: Boolean
		isVerified: Boolean
	): UserAccountConnection!
	isPrivate: Boolean!
	metadata: JSONString!
	thumbnail: MediaType
	media(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): MediaTypeConnection!
	category: String
	subCategory: String
	avrRating: Float
	reviews(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): ReviewTypeConnection
	numOfReviews: Int
	deletionStatus: String
	getStatus: String
	price: String
	currency: String
	rentPerDay: String
	rentPerWeek: String
	rentPerMonth: String
	lifespan: Int
	numberOfUses: Int
	isLiked: Boolean
	numOfLikes: Int
}

type ApparelAndOutfitAbs {
	apparel(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): ApparelConnection
	outfits(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): OutfitConnection
}

type ApparelConnection {
	pageInfo: PageInfo!
	edges: [ApparelEdge]!
}

type ApparelEdge {
	node: Apparel
	cursor: String!
}

input ApparelMutationInput {
	id: ID
	name: String
	description: String
	isPrivate: Boolean
	metadata: JSONString
	lifespan: Int
	category: String
	subcategory: String
	media: [MediaTypeInput]
	pricing: RentalItemInput
	clientMutationId: String
}

type ApparelMutationPayload {
	success: Boolean
	error: String
	apparel: Apparel
	clientMutationId: String
}

input AuthenticationInput {
	credentials: CredentialInput
	mobile: MobileAuthInput
	deviceName: String
	clientMutationId: String
}

type AuthenticationPayload {
	token: String
	id: String
	error: String
	success: Boolean
	clientMutationId: String
}

type Bin {
	apparel(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): ApparelConnection
	outfits(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): OutfitConnection
}

enum COPYRIGHT_CHOICES {
	PUBLIC_DOMAIN
	FREE_TO_USE_AND_SHARE
	FREE_TO_USE_AND_SHARE_COMMERCIALLY
	FREE_TO_MODIFY_SHARE_AND_USE
	FREE_TO_MODIFY_SHARE_AND_USE_COMMERCIALLY
	CREATIVE_COMMONS
	PRIVATE
}

type Closet implements Node {
	id: ID!
	apparel(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): ApparelConnection
	outfits(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): OutfitConnection
}

type ContentType implements Node {
	createdAt: DateTime!
	lastUpdated: DateTime!
	user: Account
	text: String
	file: String
	isPrivate: Boolean!
	id: ID!
	type: String
	url: String
	copyright: String
}

type ContentTypeConnection {
	pageInfo: PageInfo!
	edges: [ContentTypeEdge]!
}

type ContentTypeEdge {
	node: ContentType
	cursor: String!
}

input CredentialInput {
	username: String!
	password: String!
}

enum CurrencyChoices {
	INR
	USD
	GBP
	EUR
	AUD
	CAD
	JPY
	CNY
	CHF
	SEK
	NZD
}

scalar Date

scalar DateTime

scalar Decimal

input DeleteMutationInput {
	id: ID
	clientMutationId: String
}

type DeleteMutationPayload {
	success: Boolean
	error: String
	id: ID
	clientMutationId: String
}

type EmailAddressType implements Node {
	id: ID!
	email: String!
}

type EmailAddressTypeConnection {
	pageInfo: PageInfo!
	edges: [EmailAddressTypeEdge]!
}

type EmailAddressTypeEdge {
	node: EmailAddressType
	cursor: String!
}

type Explore {
	featured: ApparelAndOutfitAbs
	aroundYou(location: GISScalar): ApparelAndOutfitAbs
	trending: ApparelAndOutfitAbs
	yourCircle(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): UserAccountConnection
}

input FavouriteMutationInput {
	id: ID!
	like: Boolean
	dislike: Boolean
	clientMutationId: String
}

type FavouriteMutationPayload {
	success: Boolean
	error: String
	clientMutationId: String
}

enum GENDERS {
	MALE
	FEMALE
	OTHER
}

scalar GISScalar

scalar JSONString

enum MEDIA_TYPE {
	IMAGE
	VIDEO
	AUDIO
	SVG
	PDF
	URL
	FILE
	COMPRESSED_FILE
}

type MediaType implements Node {
	createdAt: DateTime!
	lastUpdated: DateTime!
	user: Account
	id: ID!
	type: String
	url: String
}

type MediaTypeConnection {
	pageInfo: PageInfo!
	edges: [MediaTypeEdge]!
}

type MediaTypeEdge {
	node: MediaType
	cursor: String!
}

input MediaTypeInput {
	fileName: String
}

input MobileAuthInput {
	mobile: MobileNumberInput
	verification: Verification
	whatsapp: Boolean
}

type MobileNumber implements Node {
	id: ID!
	countryCode: String!
	number: String!
}

input MobileNumberInput {
	countryCode: String = "+91"
	number: String
}

input ModifyList {
	add: [ID]
	remove: [ID]
}

type Mutations {
	profile(input: ProfileInput!): ProfilePayload
	authenticate(input: AuthenticationInput!): AuthenticationPayload
	signup(input: SignupInput!): SignupPayload
	upload(input: UploadMutationInput!): UploadMutationPayload
	apparel(input: ApparelMutationInput!): ApparelMutationPayload
	outfit(input: OutfitMutationInput!): OutfitMutationPayload
	userAccount(input: UserAccountMutationInput!): UserAccountMutationPayload
	delete(input: DeleteMutationInput!): DeleteMutationPayload
	favourite(input: FavouriteMutationInput!): FavouriteMutationPayload
}

interface Node {
	id: ID!
}

type Outfit implements Node {
	createdAt: DateTime!
	lastUpdated: DateTime!
	name: String
	description: String
	id: ID!
	liked(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		handle_Icontains: String
		isPrivate: Boolean
		isVerified: Boolean
	): UserAccountConnection!
	thumbnail: ContentType
	items(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		name_Icontains: String
		description_Icontains: String
		isPrivate: Boolean
		createdAt: DateTime
		createdAt_Lt: DateTime
		createdAt_Gt: DateTime
		lastUpdated: DateTime
		lastUpdated_Lt: DateTime
		lastUpdated_Gt: DateTime
		price_Lt: Float
		price_Gt: Float
		rent1_Lt: Float
		rent1_Gt: Float
		rent7_Lt: Float
		rent7_Gt: Float
		rent28_Lt: Float
		rent28_Gt: Float
	): ApparelConnection!
	isPrivate: Boolean!
	category: String
	subCategory: String
	avrRating: Float
	reviews(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): ReviewTypeConnection
	numOfReviews: Int
	deletionStatus: String
	getStatus: String
	price: String
	currency: String
	rentPerDay: String
	rentPerWeek: String
	rentPerMonth: String
	lifespan: Int
	numberOfUses: Int
	isLiked: Boolean
	mediaAssets(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): MediaTypeConnection
}

type OutfitConnection {
	pageInfo: PageInfo!
	edges: [OutfitEdge]!
}

type OutfitEdge {
	node: Outfit
	cursor: String!
}

input OutfitMutationInput {
	id: ID
	name: String
	description: String
	isPrivate: Boolean
	metadata: JSONString
	category: String
	subcategory: String
	thumbnail: Boolean
	pricing: RentalItemInput
	apparels: ModifyList
	clientMutationId: String
}

type OutfitMutationPayload {
	success: Boolean
	error: String
	outfit: Outfit
	clientMutationId: String
}

type PageInfo {
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
	endCursor: String
}

input ProfileInput {
	username: String
	bio: String
	password: String
	displayName: String
	sex: GENDERS
	DOB: Date
	dp: ID
	cover: ID
	mobileNumber: ID
	profession: String
	clientMutationId: String
}

type ProfilePayload {
	profile: Account
	success: Boolean
	error: String
	clientMutationId: String
}

type Query {
	apparel: Apparel
	outfit: Outfit
	userAccount(id: ID, handle: String): UserAccount
	userAccounts(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		handle_Icontains: String
		isPrivate: Boolean
		isVerified: Boolean
	): UserAccountConnection
	closet(id: ID, category: String, query: String): Closet
	explore(category: String): Explore
	search(query: String, category: String, brand: String): Search
	bin: Bin
	isLoggedIn: Boolean
	categories: [String]
	liked: ApparelAndOutfitAbs
}

input RentalItemInput {
	currency: CurrencyChoices = INR
	price: Decimal
	rent1: Float
	rent7: Float
	rent28: Float
}

type ReviewType implements Node {
	id: ID!
	user: Account
	rating: Decimal!
	media(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): ContentTypeConnection!
	comment: String
	timestamp: DateTime!
}

type ReviewTypeConnection {
	pageInfo: PageInfo!
	edges: [ReviewTypeEdge]!
}

type ReviewTypeEdge {
	node: ReviewType
	cursor: String!
}

type Search {
	apparel(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): ApparelConnection
	outfits(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): OutfitConnection
	autocomplete: [String]
	closet: [Closet]
	userAccounts(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): UserAccountConnection
	recentSearches: [String]
	trendingSearches: [String]
	history: [String]
	recomended: [String]
}

input SignupInput {
	username: String
	password: String
	clientMutationId: String
}

type SignupPayload {
	token: String
	success: Boolean
	error: String
	clientMutationId: String
}

input UploadInput {
	name: String
	text: String
	url: String
	copyrightRules: COPYRIGHT_CHOICES = 0
	isPrivate: Boolean = true
	mediaType: MEDIA_TYPE = 0
}

input UploadMutationInput {
	data: [UploadInput]
	clientMutationId: String
}

type UploadMutationPayload {
	error: String
	success: Boolean
	content: [ContentType]
	clientMutationId: String
}

type UserAccount implements Node {
	id: ID!
	cover: MediaType
	icon: MediaType
	handle: String
	user: Account!
	posessions(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		name_Icontains: String
		description_Icontains: String
		isPrivate: Boolean
		createdAt: DateTime
		createdAt_Lt: DateTime
		createdAt_Gt: DateTime
		lastUpdated: DateTime
		lastUpdated_Lt: DateTime
		lastUpdated_Gt: DateTime
		price_Lt: Float
		price_Gt: Float
		rent1_Lt: Float
		rent1_Gt: Float
		rent7_Lt: Float
		rent7_Gt: Float
		rent28_Lt: Float
		rent28_Gt: Float
	): ApparelConnection!
	owned(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		name_Icontains: String
		description_Icontains: String
		isPrivate: Boolean
		createdAt: DateTime
		createdAt_Lt: DateTime
		createdAt_Gt: DateTime
		lastUpdated: DateTime
		lastUpdated_Lt: DateTime
		lastUpdated_Gt: DateTime
		price_Lt: Float
		price_Gt: Float
		rent1_Lt: Float
		rent1_Gt: Float
		rent7_Lt: Float
		rent7_Gt: Float
		rent28_Lt: Float
		rent28_Gt: Float
	): ApparelConnection!
	outfits(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		name_Icontains: String
		description_Icontains: String
		isPrivate: Boolean
		createdAt: DateTime
		createdAt_Lt: DateTime
		createdAt_Gt: DateTime
		lastUpdated: DateTime
		lastUpdated_Lt: DateTime
		lastUpdated_Gt: DateTime
		price_Lt: Float
		price_Gt: Float
		rent1_Lt: Float
		rent1_Gt: Float
		rent7_Lt: Float
		rent7_Gt: Float
		rent28_Lt: Float
		rent28_Gt: Float
	): OutfitConnection!
	isPrivate: Boolean!
	isVerified: Boolean!
	name: String
}

type UserAccountConnection {
	pageInfo: PageInfo!
	edges: [UserAccountEdge]!
}

type UserAccountEdge {
	node: UserAccount
	cursor: String!
}

input UserAccountMutationInput {
	owned: ModifyList
	outfits: ModifyList
	clientMutationId: String
}

type UserAccountMutationPayload {
	success: Boolean
	error: String
	userAccount: UserAccount
	clientMutationId: String
}

input Verification {
	id: String
	otp: String
}
