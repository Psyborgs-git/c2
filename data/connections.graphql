schema {
	query: Query
	mutation: Mutation
}

type Account implements Node {
	id: ID!
	username: String
	displayName: String
	bio: String
	DOB: Date
	isPrivate: Boolean!
	verifiedMobileNumber: MobileNumber
	verifiedEmails(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): EmailAddressTypeConnection!
	profession: String
	blocked(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): AccountConnection!
	following(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): AccountConnection!
	dp: String
	music: String
	cover: String
	sex: String
	mutuals(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): AccountConnection
	followers(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): AccountConnection
}

type AccountConnection {
	pageInfo: PageInfo!
	edges: [AccountEdge]!
}

type AccountEdge {
	node: Account
	cursor: String!
}

type ApplicationType implements Node {
	name: String
	owners(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): AccountConnection!
	description: String
	domain: String
	apiKey: String
	expires: DateTime
	id: ID!
	status: String
}

type Connection implements Node {
	id: ID!
	app: ApplicationType
	contacts(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		nickname_Icontains: String
		mobile_Number_Icontains: String
		name_Icontains: String
		createdAt_Lt: DateTime
		createdAt_Gt: DateTime
		lastUpdated_Lt: DateTime
		lastUpdated_Gt: DateTime
		company_Icontains: String
		currentPosition_Icontains: String
		address_Icontains: String
		city_Icontains: String
		state_Icontains: String
		country_Name_Icontains: String
		pincode_Icontains: String
	): DetailsConnection!
	userIsOwner: Boolean
	notes(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		title_Icontains: String
		content_Icontains: String
		contact_Name_Icontains: String
		contact_CurrentPosition_Icontains: String
		contact_Company_Icontains: String
		lastUpdated_Gte: DateTime
		lastUpdated_Lte: DateTime
		createdAt_Gte: DateTime
		createdAt_Lte: DateTime
	): NoteConnection
}

type ConnectionConnection {
	pageInfo: PageInfo!
	edges: [ConnectionEdge]!
}

type ConnectionEdge {
	node: Connection
	cursor: String!
}

input ConnectionMutationInput {
	id: ID
	app: ID
	contacts: ModifyList
	clientMutationId: String
}

type ConnectionMutationPayload {
	success: Boolean
	error: String
	connection: Connection
	clientMutationId: String
}

input ContactMutationInput {
	id: ID
	numbers: [MobileNumberInput]
	emails: [String]
	name: String
	nickname: String
	company: String
	currentPosition: String
	address: String
	city: String
	state: String
	country: String
	clientMutationId: String
}

type ContactMutationPayload {
	success: Boolean
	error: String
	contact: Details
	clientMutationId: String
}

type Country implements Node {
	id: ID!
	name: String!
	iso2: String!
	iso3: String!
	un: Int!
	region: Int!
	subregion: Int!
	geom: MultiPolygonScalar!
}

scalar Date

scalar DateTime

type Details implements Node {
	createdAt: DateTime!
	lastUpdated: DateTime!
	name: String
	description: String
	id: ID!
	nickname: String
	mobile(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
	): MobileNumberConnection!
	company: String
	currentPosition: String
	address: String
	city: String
	state: String
	country: Country
	pincode: String
	emails: [String]
}

type DetailsConnection {
	pageInfo: PageInfo!
	edges: [DetailsEdge]!
}

type DetailsEdge {
	node: Details
	cursor: String!
}

type EmailAddressType implements Node {
	id: ID!
	email: String!
}

type EmailAddressTypeConnection {
	pageInfo: PageInfo!
	edges: [EmailAddressTypeEdge]!
}

type EmailAddressTypeEdge {
	node: EmailAddressType
	cursor: String!
}

type Group implements Node {
	id: ID!
	name: String!
	connection: Connection
	contacts(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		nickname_Icontains: String
		mobile_Number_Icontains: String
		name_Icontains: String
		createdAt_Lt: DateTime
		createdAt_Gt: DateTime
		lastUpdated_Lt: DateTime
		lastUpdated_Gt: DateTime
		company_Icontains: String
		currentPosition_Icontains: String
		address_Icontains: String
		city_Icontains: String
		state_Icontains: String
		country_Name_Icontains: String
		pincode_Icontains: String
	): DetailsConnection!
	userIsOwner: Boolean
}

type GroupConnection {
	pageInfo: PageInfo!
	edges: [GroupEdge]!
}

type GroupEdge {
	node: Group
	cursor: String!
}

input GroupMutationInput {
	id: ID
	name: String
	connection: ModifyList
	contacts: ModifyList
	clientMutationId: String
}

type GroupMutationPayload {
	success: Boolean
	error: String
	group: Group
	clientMutationId: String
}

type MobileNumber implements Node {
	id: ID!
	countryCode: String!
	number: String!
}

type MobileNumberConnection {
	pageInfo: PageInfo!
	edges: [MobileNumberEdge]!
}

type MobileNumberEdge {
	node: MobileNumber
	cursor: String!
}

input MobileNumberInput {
	countryCode: String = "+91"
	number: String
}

input ModifyList {
	add: [ID]
	remove: [ID]
}

scalar MultiPolygonScalar

type Mutation {
	contact(input: ContactMutationInput!): ContactMutationPayload
	connection(input: ConnectionMutationInput!): ConnectionMutationPayload
	group(input: GroupMutationInput!): GroupMutationPayload
	note(input: NoteMutationInput!): NoteMutationPayload
}

interface Node {
	id: ID!
}

type Note implements Node {
	createdAt: DateTime!
	lastUpdated: DateTime!
	id: ID!
	title: String!
	content: String!
	app: ApplicationType
	contact: Details
	userIsOwner: Boolean
}

type NoteConnection {
	pageInfo: PageInfo!
	edges: [NoteEdge]!
}

type NoteEdge {
	node: Note
	cursor: String!
}

input NoteMutationInput {
	id: ID
	title: String
	content: String
	contact: MobileNumberInput
	contactId: ID
	clientMutationId: String
}

type NoteMutationPayload {
	success: Boolean
	error: String
	note: Note
	clientMutationId: String
}

type PageInfo {
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
	endCursor: String
}

type Query {
	contact(id: ID!): Details
	group(id: ID!): Group
	note(id: ID!): Note
	userConnections(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		contacts_Name_Icontains: String
		contacts_CurrentPosition_Icontains: String
		contacts_Company_Icontains: String
	): ConnectionConnection
	userGroups(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		name_Icontains: String
	): GroupConnection
	userNotes(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		title_Icontains: String
		content_Icontains: String
		contact_Name_Icontains: String
		contact_CurrentPosition_Icontains: String
		contact_Company_Icontains: String
		lastUpdated_Gte: DateTime
		lastUpdated_Lte: DateTime
		createdAt_Gte: DateTime
		createdAt_Lte: DateTime
	): NoteConnection
	connection: Connection
	groups(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		name_Icontains: String
	): GroupConnection
	contacts(
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		nickname_Icontains: String
		mobile_Number_Icontains: String
		name_Icontains: String
		createdAt_Lt: DateTime
		createdAt_Gt: DateTime
		lastUpdated_Lt: DateTime
		lastUpdated_Gt: DateTime
		company_Icontains: String
		currentPosition_Icontains: String
		address_Icontains: String
		city_Icontains: String
		state_Icontains: String
		country_Name_Icontains: String
		pincode_Icontains: String
	): DetailsConnection
	notes(
		contactId: ID
		offset: Int
		before: String
		after: String
		first: Int
		last: Int
		title_Icontains: String
		content_Icontains: String
		contact_Name_Icontains: String
		contact_CurrentPosition_Icontains: String
		contact_Company_Icontains: String
		lastUpdated_Gte: DateTime
		lastUpdated_Lte: DateTime
		createdAt_Gte: DateTime
		createdAt_Lte: DateTime
	): NoteConnection
}
